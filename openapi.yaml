
openapi: 3.0.3
info:
  title: Certifly API
  description: API for Tokenized Certificate Platform
  version: 1.0.0
servers:
  - url: https://api.certifly.in
    description: Production API
  - url: https://staging-api.certifly.in
    description: Staging API
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
        email:
          type: string
          format: email
          nullable: true
          description: User's email address
        full_name:
          type: string
          description: User's full name
        wallet_address:
          type: string
          description: Solana wallet address
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Account update timestamp
      required:
        - id
        - full_name
        - wallet_address
        - created_at
        - updated_at
    Certificate:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the certificate
        user_id:
          type: string
          description: Owner user ID
        title:
          type: string
          description: Certificate title
        institution_name:
          type: string
          description: Issuing institution name
        program_name:
          type: string
          description: Program or course name
        issue_date:
          type: string
          format: date
          description: Date when certificate was issued
        verification_url:
          type: string
          format: uri
          description: URL for certificate verification
        certificate_url:
          type: string
          format: uri
          description: URL to the certificate PDF
        arweave_url:
          type: string
          format: uri
          nullable: true
          description: Permanent storage URL on Arweave
        nft_mint_address:
          type: string
          nullable: true
          description: Solana NFT mint address
        verification_status:
          type: string
          enum:
            - pending
            - verified
            - rejected
          description: Certificate verification status
        verification_details:
          type: string
          nullable: true
          description: JSON string with verification details
        created_at:
          type: string
          format: date-time
          description: Certificate creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Certificate update timestamp
      required:
        - id
        - user_id
        - title
        - institution_name
        - program_name
        - issue_date
        - verification_url
        - certificate_url
        - verification_status
        - created_at
        - updated_at
    AuthRequest:
      type: object
      properties:
        message:
          type: string
          description: Message that was signed
        signature:
          type: string
          description: Base58-encoded signature
        publicKey:
          type: string
          description: Base58-encoded public key
      required:
        - message
        - signature
        - publicKey
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication
        user:
          $ref: '#/components/schemas/User'
      required:
        - token
        - user
    ProfileUpdateRequest:
      type: object
      properties:
        fullName:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        photoFileName:
          type: string
          description: Filename for profile photo upload
    ProfileUpdateResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        uploadUrl:
          type: string
          format: uri
          description: Pre-signed URL for photo upload
        publicUrl:
          type: string
          format: uri
          description: Public URL for the uploaded photo
      required:
        - user
    CreateCertificateRequest:
      type: object
      properties:
        title:
          type: string
          description: Certificate title
        institutionName:
          type: string
          description: Issuing institution name
        programName:
          type: string
          description: Program or course name
        issueDate:
          type: string
          format: date
          description: Issue date in YYYY-MM-DD format
        fileName:
          type: string
          description: Original file name
        fileType:
          type: string
          description: MIME type of the file
        requestUploadUrl:
          type: boolean
          description: Whether to return a pre-signed URL for upload
      required:
        - title
        - institutionName
        - programName
        - issueDate
        - fileName
        - fileType
    CreateCertificateResponse:
      type: object
      properties:
        id:
          type: string
          description: Certificate ID
        uploadUrl:
          type: string
          format: uri
          description: Pre-signed upload URL
        expiresAt:
          type: number
          description: Timestamp when upload URL expires
        certificateUrl:
          type: string
          format: uri
          description: Public URL for the certificate
        verificationUrl:
          type: string
          format: uri
          description: URL for certificate verification
      required:
        - id
        - certificateUrl
        - verificationUrl
    VerificationResponse:
      type: object
      properties:
        id:
          type: string
          description: Certificate ID
        status:
          type: string
          enum:
            - pending
            - verified
            - rejected
          description: Verification status
        details:
          type: object
          nullable: true
          description: Verification details
      required:
        - id
        - status
    MintResponse:
      type: object
      properties:
        id:
          type: string
          description: Certificate ID
        mintAddress:
          type: string
          description: Solana NFT mint address
        arweaveUrl:
          type: string
          format: uri
          description: Permanent storage URL on Arweave
      required:
        - id
        - mintAddress
        - arweaveUrl
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
paths:
  /api/auth/login:
    post:
      summary: Authenticate with Solana wallet
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/me:
    get:
      summary: Get current user profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/profile:
    get:
      summary: Get user profile
      tags:
        - Profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user profile
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdateRequest'
      responses:
        '200':
          description: Updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileUpdateResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/certificates:
    get:
      summary: List user certificates
      tags:
        - Certificates
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of certificates
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificates:
                    type: array
                    items:
                      $ref: '#/components/schemas/Certificate'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new certificate
      tags:
        - Certificates
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCertificateRequest'
      responses:
        '200':
          description: Certificate created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCertificateResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/certificates/{id}:
    get:
      summary: Get certificate details
      tags:
        - Certificates
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Certificate details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a certificate
      tags:
        - Certificates
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Certificate deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/verify/{id}:
    get:
      summary: Get verification status
      tags:
        - Verification
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Verification status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Initiate certificate verification
      tags:
        - Verification
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Verification initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResponse'
        '400':
          description: Certificate already verified or rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/mint/{id}:
    post:
      summary: Mint certificate as NFT
      tags:
        - Minting
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: NFT minted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MintResponse'
        '400':
          description: Certificate not verified or already minted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
